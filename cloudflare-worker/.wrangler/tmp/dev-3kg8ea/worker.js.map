{
  "version": 3,
  "sources": ["../bundle-sKPPFv/checked-fetch.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../../../src/decorate.ts", "../../../src/worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-sKPPFv/middleware-insertion-facade.js", "../bundle-sKPPFv/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/.wrangler/tmp/dev-3kg8ea",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t  );\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "interface DecoratorOptions {\n\turl: URL;\n}\n\nexport function decorate(res: Response, options: DecoratorOptions) {\n\t/** Fragments */\n\tres = new HTMLRewriter()\n\t\t// Embeded\n\t\t.on('.fragment', new Fragment(options.url))\n\n\t\t// Footer\n\t\t.on('footer', new Fragment(options.url, '/fragments/footer'))\n\n\t\t// Transform\n\t\t.transform(res);\n\n\t/** Blocks */\n\tres = new HTMLRewriter()\n\t\t// Fragments\n\t\t.on('footer > div', new PruneElement())\n\n\t\t.on('.fragment, .fragment > div, .fragment > div > div', new PruneElement())\n\n\t\t// Items Blocks\n\t\t.on('div[class]:not(.fragment)', new CustomElement())\n\t\t.on('div[class]:not(.fragment) > div', new Slots())\n\n\t\t// TODO: need convetion for non \"metadata\" blocks that are key-values slots\n\t\t// Metadata Blocks\n\t\t.on('div[class$=\"-metadata\"]', new Metadata())\n\t\t.on('div[class$=\"-metadata\"] > div', new KeyValueSlots())\n\t\t.on('div[class$=\"-metadata\"] div', new PruneElement())\n\n\t\t// Transform\n\t\t.transform(res);\n\n\treturn res;\n}\n\nclass Fragment {\n\tprivate baseURL: URL;\n\tprivate path?: string;\n\n\tconstructor(baseURL: URL, path?: string) {\n\t\tif (!baseURL) throw new Error('URL is required');\n\n\t\tthis.baseURL = baseURL;\n\t\tthis.path = path;\n\t}\n\n\tasync element(element: Element) {\n\t\tif (this.path) {\n\t\t\tconst content = await this.fetchFragment(this.path);\n\n\t\t\tif (content) {\n\t\t\t\telement.append(content, { html: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync text(text: Text) {\n\t\tconst empty = !text.text.trim().toLowerCase();\n\n\t\tif (empty) return;\n\n\t\tconst content = await this.fetchFragment(text.text);\n\n\t\tif (content) {\n\t\t\ttext.replace(content, { html: true });\n\t\t}\n\t}\n\n\tasync fetchFragment(path: string) {\n\t\tconst fragmentURL = new URL(`${path}.plain.html`, this.baseURL);\n\n\t\tconst response = await fetch(fragmentURL);\n\n\t\tif (response.ok) return await response.text();\n\n\t\tconsole.error(`Fragment ${fragmentURL} not found.`);\n\t}\n}\n\nclass CustomElement {\n\telement(element: Element) {\n\t\tconst tagName = element.getAttribute('class')?.split(' ')[0]?.toString();\n\n\t\tif (tagName && tagName !== 'aem-block') {\n\t\t\telement.setAttribute('class', 'aem-block');\n\t\t\telement.tagName = `aem-${tagName}`;\n\t\t}\n\t}\n}\n\nclass Metadata {\n\telement(element: Element) {\n\t\tconst tagName = element.getAttribute('class')?.split(' ')[0]?.toString();\n\n\t\tif (tagName) {\n\t\t\telement.setAttribute('class', 'aem-block aem-metadata');\n\n\t\t\tif (tagName !== 'aem-block') {\n\t\t\t\telement.tagName = `aem-${tagName}`;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass KeyValueSlots {\n\tprivate values = new Set<string>();\n\n\telement(element: Element) {\n\t\telement.removeAndKeepContent();\n\t\tthis.values.clear();\n\t}\n\n\ttext(text: Text) {\n\t\tconst empty = !text.text.trim().toLowerCase();\n\n\t\t// stop if it's an empty string\n\t\tif (empty) return;\n\n\t\t// No key yet? This is a key\n\t\tif (this.values.size === 0) {\n\t\t\ttext.remove();\n\t\t}\n\n\t\tthis.values.add(text.text);\n\n\t\t// No previous key? This is a key\n\t\tif (this.values.size > 1) {\n\t\t\tconst key = this.values.values().next().value.toLowerCase();\n\t\t\ttext.replace(`<div slot=\"${key}\">${text.text}</div>`, { html: true });\n\t\t}\n\t}\n}\n\nclass Slots {\n\telement(element: Element) {\n\t\telement.setAttribute('slot', 'item');\n\t}\n}\n\nclass PruneElement {\n\telement(element: Element) {\n\t\telement.removeAndKeepContent();\n\t}\n\n\ttext(text: Text) {\n\t\tconst empty = !text.text.trim().toLowerCase();\n\n\t\tif (empty) {\n\t\t\ttext.remove();\n\t\t}\n\t}\n}\n", "/**\n * Welcome to Cloudflare Workers! This is your first worker.\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\n * - Run `npm run deploy` to publish your worker\n *\n * Learn more at https://developers.cloudflare.com/workers/\n */\n\nimport { Env } from './env';\nimport { decorate } from './decorate';\n\nexport default {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n\t\t// parse url\n\t\tconst url = new URL(request.url);\n\n\t\t// is it a draft?\n\t\tconst drafts = url.pathname.startsWith('/drafts/');\n\n\t\t// is it a request from development environment?\n\t\tconst localhost = /localhost|127\\.0\\.0\\.1/.test(url.hostname);\n\n\t\t// is it preview environment?\n\t\tconst preview = localhost || url.hostname.split('.')[0] === 'preview';\n\n\t\t// only allow drafts in preview environment\n\t\tif (drafts && !preview) {\n\t\t\treturn new Response('Not Found', { status: 404 });\n\t\t}\n\n\t\tlet strippedQS;\n\n\t\tif (url.search && !url.pathname.match(/\\.[0-9a-z]+$/i)) {\n\t\t\t// extensionless request w/ query string: strip query string\n\t\t\tstrippedQS = url.search;\n\t\t\turl.search = '';\n\t\t}\n\n\t\turl.hostname = preview ? env.PREVIEW_HOSTNAME : env.PRODUCTION_HOSTNAME;\n\n\t\tif (localhost) {\n\t\t\turl.port = '3000';\n\t\t\turl.hostname = 'localhost';\n\t\t}\n\n\t\tconst req = new Request(url, request);\n\n\t\tconst host = req.headers.get('host') ?? '';\n\n\t\treq.headers.set('x-forwarded-host', host ?? '');\n\n\t\treq.headers.set('x-byo-cdn-type', 'cloudflare');\n\n\t\t// set the following header if push invalidation is configured\n\t\t// (see https://www.hlx.live/docs/setup-byo-cdn-push-invalidation#cloudflare)\n\t\treq.headers.set('x-push-invalidation', 'enabled');\n\n\t\tlet res = await fetch(req, {\n\t\t\tcf: {\n\t\t\t\t// cf doesn't cache html by default: need to override the default behavior\n\t\t\t\tcacheEverything: !localhost,\n\t\t\t},\n\t\t});\n\n\t\tres = new Response(res.body, res);\n\n\t\tif (res.status === 301 && strippedQS) {\n\t\t\tconst location = res.headers.get('location');\n\n\t\t\tif (location && !location.match(/\\?.*$/)) {\n\t\t\t\tres.headers.set('location', `${location}${strippedQS}`);\n\t\t\t}\n\t\t}\n\n\t\tres.headers.delete('age');\n\t\tres.headers.delete('x-robots-tag');\n\n\t\treturn decorate(res, { url });\n\t},\n};\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\nexport const wrap = undefined;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/src/worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\t\t\t\tconst envWrappers = [__MIDDLEWARE_0__.wrap].filter(Boolean);\n\t\t\t\tconst facade = {\n\t\t\t\t\t...worker,\n\t\t\t\t\tenvWrappers,\n\t\t\t\t\tmiddleware: [\n\t\t\t\t\t\t__MIDDLEWARE_0__.default,\n            ...(worker.middleware ? worker.middleware : []),\n\t\t\t\t\t].filter(Boolean)\n\t\t\t\t}\n\t\t\t\texport * from \"/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/src/worker.ts\";\n\n\t\t\t\tconst maskDurableObjectDefinition = (cls) =>\n\t\t\t\t\tclass extends cls {\n\t\t\t\t\t\tconstructor(state, env) {\n\t\t\t\t\t\t\tlet wrappedEnv = env\n\t\t\t\t\t\t\tfor (const wrapFn of envWrappers) {\n\t\t\t\t\t\t\t\twrappedEnv = wrapFn(wrappedEnv)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsuper(state, wrappedEnv);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\n\n\t\t\t\texport default facade;", "// // This loads all middlewares exposed on the middleware object\n// // and then starts the invocation chain.\n// // The big idea is that we can add these to the middleware export dynamically\n// // through wrangler, or we can potentially let users directly add them as a sort\n// // of \"plugin\" system.\n\nimport {\n\tDispatcher,\n\tMiddleware,\n\t__facade_invoke__,\n\t__facade_register__,\n} from \"/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/node_modules/wrangler/templates/middleware/common.ts\";\n\nimport worker from \"/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/.wrangler/tmp/bundle-sKPPFv/middleware-insertion-facade.js\";\n\n// We need to preserve all of the exports from the worker\nexport * from \"/Users/fnhipster/Development/fnhipster-edge/cloudflare-worker/.wrangler/tmp/bundle-sKPPFv/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\t#noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nconst __facade_modules_fetch__: ExportedHandlerFetchHandler = function (\n\trequest,\n\tenv,\n\tctx\n) {\n\tif (worker.fetch === undefined)\n\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\treturn worker.fetch(request, env, ctx);\n};\n\nfunction getMaskedEnv(rawEnv: unknown) {\n\tlet env = rawEnv as Record<string, unknown>;\n\tif (worker.envWrappers && worker.envWrappers.length > 0) {\n\t\tfor (const wrapFn of worker.envWrappers) {\n\t\t\tenv = wrapFn(env);\n\t\t}\n\t}\n\treturn env;\n}\n\n/**\n * This type is here to cause a type error if a new export handler is added to\n * `ExportHandler` without it being included in the `facade` below.\n */\ntype MissingExportHandlers = Omit<\n\tRequired<ExportedHandler>,\n\t\"tail\" | \"trace\" | \"scheduled\" | \"queue\" | \"test\" | \"email\" | \"fetch\"\n>;\n\nlet registeredMiddleware = false;\n\nconst facade: ExportedHandler<unknown> & MissingExportHandlers = {\n\t...(worker.tail && {\n\t\ttail: maskHandlerEnv(worker.tail),\n\t}),\n\t...(worker.trace && {\n\t\ttrace: maskHandlerEnv(worker.trace),\n\t}),\n\t...(worker.scheduled && {\n\t\tscheduled: maskHandlerEnv(worker.scheduled),\n\t}),\n\t...(worker.queue && {\n\t\tqueue: maskHandlerEnv(worker.queue),\n\t}),\n\t...(worker.test && {\n\t\ttest: maskHandlerEnv(worker.test),\n\t}),\n\t...(worker.email && {\n\t\temail: maskHandlerEnv(worker.email),\n\t}),\n\n\tfetch(request, rawEnv, ctx) {\n\t\tconst env = getMaskedEnv(rawEnv);\n\t\t// Get the chain of middleware from the worker object\n\t\tif (worker.middleware && worker.middleware.length > 0) {\n\t\t\t// Make sure we only register middleware once:\n\t\t\t// https://github.com/cloudflare/workers-sdk/issues/2386#issuecomment-1614715911\n\t\t\tif (!registeredMiddleware) {\n\t\t\t\tregisteredMiddleware = true;\n\t\t\t\tfor (const middleware of worker.middleware) {\n\t\t\t\t\t__facade_register__(middleware);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst __facade_modules_dispatch__: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tenv,\n\t\t\t\tctx,\n\t\t\t\t__facade_modules_dispatch__,\n\t\t\t\t__facade_modules_fetch__\n\t\t\t);\n\t\t} else {\n\t\t\t// We didn't have any middleware so we can skip the invocation chain,\n\t\t\t// and just call the fetch handler directly\n\n\t\t\t// We \"don't care\" if this is undefined as we want to have the same behavior\n\t\t\t// as if the worker completely bypassed middleware.\n\t\t\treturn __facade_modules_fetch__(request, env, ctx);\n\t\t}\n\t},\n};\n\ntype HandlerFn<D, R> = (data: D, env: unknown, ctx: ExecutionContext) => R;\nfunction maskHandlerEnv<D, R>(handler: HandlerFn<D, R>): HandlerFn<D, R> {\n\treturn (data, env, ctx) => handler(data, getMaskedEnv(env), ctx);\n}\n\nexport default facade;\n"],
  "mappings": ";AAAA,IAAM,OAAO,oBAAI,IAAI;AAErB,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACF;AACJ,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS;AAAA;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AACD;AAEA,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,UAAM,CAAC,SAAS,IAAI,IAAI;AACxB,aAAS,SAAS,IAAI;AACtB,WAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,EAC/C;AACD,CAAC;;;ACLD,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAOA,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAEO,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;;;AC9DO,SAAS,SAAS,KAAe,SAA2B;AAElE,QAAM,IAAI,aAAa,EAErB,GAAG,aAAa,IAAI,SAAS,QAAQ,GAAG,CAAC,EAGzC,GAAG,UAAU,IAAI,SAAS,QAAQ,KAAK,mBAAmB,CAAC,EAG3D,UAAU,GAAG;AAGf,QAAM,IAAI,aAAa,EAErB,GAAG,gBAAgB,IAAI,aAAa,CAAC,EAErC,GAAG,qDAAqD,IAAI,aAAa,CAAC,EAG1E,GAAG,6BAA6B,IAAI,cAAc,CAAC,EACnD,GAAG,mCAAmC,IAAI,MAAM,CAAC,EAIjD,GAAG,2BAA2B,IAAI,SAAS,CAAC,EAC5C,GAAG,iCAAiC,IAAI,cAAc,CAAC,EACvD,GAAG,+BAA+B,IAAI,aAAa,CAAC,EAGpD,UAAU,GAAG;AAEf,SAAO;AACR;AAEA,IAAM,WAAN,MAAe;AAAA,EACN;AAAA,EACA;AAAA,EAER,YAAY,SAAc,MAAe;AACxC,QAAI,CAAC;AAAS,YAAM,IAAI,MAAM,iBAAiB;AAE/C,SAAK,UAAU;AACf,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,MAAM,QAAQ,SAAkB;AAC/B,QAAI,KAAK,MAAM;AACd,YAAM,UAAU,MAAM,KAAK,cAAc,KAAK,IAAI;AAElD,UAAI,SAAS;AACZ,gBAAQ,OAAO,SAAS,EAAE,MAAM,KAAK,CAAC;AAAA,MACvC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,KAAK,MAAY;AACtB,UAAM,QAAQ,CAAC,KAAK,KAAK,KAAK,EAAE,YAAY;AAE5C,QAAI;AAAO;AAEX,UAAM,UAAU,MAAM,KAAK,cAAc,KAAK,IAAI;AAElD,QAAI,SAAS;AACZ,WAAK,QAAQ,SAAS,EAAE,MAAM,KAAK,CAAC;AAAA,IACrC;AAAA,EACD;AAAA,EAEA,MAAM,cAAc,MAAc;AACjC,UAAM,cAAc,IAAI,IAAI,GAAG,mBAAmB,KAAK,OAAO;AAE9D,UAAM,WAAW,MAAM,MAAM,WAAW;AAExC,QAAI,SAAS;AAAI,aAAO,MAAM,SAAS,KAAK;AAE5C,YAAQ,MAAM,YAAY,wBAAwB;AAAA,EACnD;AACD;AAEA,IAAM,gBAAN,MAAoB;AAAA,EACnB,QAAQ,SAAkB;AACzB,UAAM,UAAU,QAAQ,aAAa,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS;AAEvE,QAAI,WAAW,YAAY,aAAa;AACvC,cAAQ,aAAa,SAAS,WAAW;AACzC,cAAQ,UAAU,OAAO;AAAA,IAC1B;AAAA,EACD;AACD;AAEA,IAAM,WAAN,MAAe;AAAA,EACd,QAAQ,SAAkB;AACzB,UAAM,UAAU,QAAQ,aAAa,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS;AAEvE,QAAI,SAAS;AACZ,cAAQ,aAAa,SAAS,wBAAwB;AAEtD,UAAI,YAAY,aAAa;AAC5B,gBAAQ,UAAU,OAAO;AAAA,MAC1B;AAAA,IACD;AAAA,EACD;AACD;AAEA,IAAM,gBAAN,MAAoB;AAAA,EACX,SAAS,oBAAI,IAAY;AAAA,EAEjC,QAAQ,SAAkB;AACzB,YAAQ,qBAAqB;AAC7B,SAAK,OAAO,MAAM;AAAA,EACnB;AAAA,EAEA,KAAK,MAAY;AAChB,UAAM,QAAQ,CAAC,KAAK,KAAK,KAAK,EAAE,YAAY;AAG5C,QAAI;AAAO;AAGX,QAAI,KAAK,OAAO,SAAS,GAAG;AAC3B,WAAK,OAAO;AAAA,IACb;AAEA,SAAK,OAAO,IAAI,KAAK,IAAI;AAGzB,QAAI,KAAK,OAAO,OAAO,GAAG;AACzB,YAAM,MAAM,KAAK,OAAO,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY;AAC1D,WAAK,QAAQ,cAAc,QAAQ,KAAK,cAAc,EAAE,MAAM,KAAK,CAAC;AAAA,IACrE;AAAA,EACD;AACD;AAEA,IAAM,QAAN,MAAY;AAAA,EACX,QAAQ,SAAkB;AACzB,YAAQ,aAAa,QAAQ,MAAM;AAAA,EACpC;AACD;AAEA,IAAM,eAAN,MAAmB;AAAA,EAClB,QAAQ,SAAkB;AACzB,YAAQ,qBAAqB;AAAA,EAC9B;AAAA,EAEA,KAAK,MAAY;AAChB,UAAM,QAAQ,CAAC,KAAK,KAAK,KAAK,EAAE,YAAY;AAE5C,QAAI,OAAO;AACV,WAAK,OAAO;AAAA,IACb;AAAA,EACD;AACD;;;AC9IA,IAAO,iBAAQ;AAAA,EACd,MAAM,MAAM,SAAkB,KAAU,KAA0C;AAEjF,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAG/B,UAAM,SAAS,IAAI,SAAS,WAAW,UAAU;AAGjD,UAAM,YAAY,yBAAyB,KAAK,IAAI,QAAQ;AAG5D,UAAM,UAAU,aAAa,IAAI,SAAS,MAAM,GAAG,EAAE,CAAC,MAAM;AAG5D,QAAI,UAAU,CAAC,SAAS;AACvB,aAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,IACjD;AAEA,QAAI;AAEJ,QAAI,IAAI,UAAU,CAAC,IAAI,SAAS,MAAM,eAAe,GAAG;AAEvD,mBAAa,IAAI;AACjB,UAAI,SAAS;AAAA,IACd;AAEA,QAAI,WAAW,UAAU,IAAI,mBAAmB,IAAI;AAEpD,QAAI,WAAW;AACd,UAAI,OAAO;AACX,UAAI,WAAW;AAAA,IAChB;AAEA,UAAM,MAAM,IAAI,QAAQ,KAAK,OAAO;AAEpC,UAAM,OAAO,IAAI,QAAQ,IAAI,MAAM,KAAK;AAExC,QAAI,QAAQ,IAAI,oBAAoB,QAAQ,EAAE;AAE9C,QAAI,QAAQ,IAAI,kBAAkB,YAAY;AAI9C,QAAI,QAAQ,IAAI,uBAAuB,SAAS;AAEhD,QAAI,MAAM,MAAM,MAAM,KAAK;AAAA,MAC1B,IAAI;AAAA;AAAA,QAEH,iBAAiB,CAAC;AAAA,MACnB;AAAA,IACD,CAAC;AAED,UAAM,IAAI,SAAS,IAAI,MAAM,GAAG;AAEhC,QAAI,IAAI,WAAW,OAAO,YAAY;AACrC,YAAM,WAAW,IAAI,QAAQ,IAAI,UAAU;AAE3C,UAAI,YAAY,CAAC,SAAS,MAAM,OAAO,GAAG;AACzC,YAAI,QAAQ,IAAI,YAAY,GAAG,WAAW,YAAY;AAAA,MACvD;AAAA,IACD;AAEA,QAAI,QAAQ,OAAO,KAAK;AACxB,QAAI,QAAQ,OAAO,cAAc;AAEjC,WAAO,SAAS,KAAK,EAAE,IAAI,CAAC;AAAA,EAC7B;AACD;;;ACxEA,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAGA,IAAM,YAAwB,OAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAP;AACD,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD;AAEA,IAAO,2CAAQ;AACR,IAAM,OAAO;;;AC9BhB,IAAM,cAAc,CAAkB,IAAI,EAAE,OAAO,OAAO;AAC1D,IAAM,SAAS;AAAA,EACd,GAAG;AAAA,EACH;AAAA,EACA,YAAY;AAAA,IACM;AAAA,IACX,GAAI,eAAO,aAAa,eAAO,aAAa,CAAC;AAAA,EACpD,EAAE,OAAO,OAAO;AACjB;AAeA,IAAO,sCAAQ;;;ACPnB,IAAM,iCAAN,MAAoE;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EARA;AAAA,EAUA,UAAU;AACT,QAAI,EAAE,gBAAgB,iCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,IAAM,2BAAwD,SAC7D,SACA,KACA,KACC;AACD,MAAI,oCAAO,UAAU;AACpB,UAAM,IAAI,MAAM,6CAA6C;AAC9D,SAAO,oCAAO,MAAM,SAAS,KAAK,GAAG;AACtC;AAEA,SAAS,aAAa,QAAiB;AACtC,MAAI,MAAM;AACV,MAAI,oCAAO,eAAe,oCAAO,YAAY,SAAS,GAAG;AACxD,eAAW,UAAU,oCAAO,aAAa;AACxC,YAAM,OAAO,GAAG;AAAA,IACjB;AAAA,EACD;AACA,SAAO;AACR;AAWA,IAAI,uBAAuB;AAE3B,IAAMA,UAA2D;AAAA,EAChE,GAAI,oCAAO,QAAQ;AAAA,IAClB,MAAM,eAAe,oCAAO,IAAI;AAAA,EACjC;AAAA,EACA,GAAI,oCAAO,SAAS;AAAA,IACnB,OAAO,eAAe,oCAAO,KAAK;AAAA,EACnC;AAAA,EACA,GAAI,oCAAO,aAAa;AAAA,IACvB,WAAW,eAAe,oCAAO,SAAS;AAAA,EAC3C;AAAA,EACA,GAAI,oCAAO,SAAS;AAAA,IACnB,OAAO,eAAe,oCAAO,KAAK;AAAA,EACnC;AAAA,EACA,GAAI,oCAAO,QAAQ;AAAA,IAClB,MAAM,eAAe,oCAAO,IAAI;AAAA,EACjC;AAAA,EACA,GAAI,oCAAO,SAAS;AAAA,IACnB,OAAO,eAAe,oCAAO,KAAK;AAAA,EACnC;AAAA,EAEA,MAAM,SAAS,QAAQ,KAAK;AAC3B,UAAM,MAAM,aAAa,MAAM;AAE/B,QAAI,oCAAO,cAAc,oCAAO,WAAW,SAAS,GAAG;AAGtD,UAAI,CAAC,sBAAsB;AAC1B,+BAAuB;AACvB,mBAAW,cAAc,oCAAO,YAAY;AAC3C,8BAAoB,UAAU;AAAA,QAC/B;AAAA,MACD;AAEA,YAAM,8BAA0C,SAAU,MAAM,MAAM;AACrE,YAAI,SAAS,eAAe,oCAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,oCAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD;AAEA,aAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,OAAO;AAMN,aAAO,yBAAyB,SAAS,KAAK,GAAG;AAAA,IAClD;AAAA,EACD;AACD;AAGA,SAAS,eAAqB,SAA2C;AACxE,SAAO,CAAC,MAAM,KAAK,QAAQ,QAAQ,MAAM,aAAa,GAAG,GAAG,GAAG;AAChE;AAEA,IAAO,kCAAQA;",
  "names": ["facade"]
}
